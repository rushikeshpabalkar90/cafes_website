import random
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from functools import wraps
from flask import Flask, render_template, request, flash, redirect, url_for, abort
from flask_login import UserMixin, login_user, LoginManager, login_required, current_user, logout_user
from flask_sqlalchemy import SQLAlchemy
from werkzeug.security import generate_password_hash, check_password_hash

# use 'pip install Flask-SQLAlchemy'

app = Flask(__name__)
app.config['SECRET_KEY'] = '8BYkEfBA6O6donzWlSihBXox7C0sKR6b'
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///cafes.db'
app.config['SQLALCHEMY_TRACK_MODIFICATION'] = False
db = SQLAlchemy(app)
login_manager = LoginManager()
login_manager.init_app(app)
app.app_context().push()

OTP = ''


@login_manager.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))


class User(UserMixin, db.Model):
    __tablename__ = "users"
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(200), nullable=False)
    email = db.Column(db.String(100), unique=True)
    password = db.Column(db.String(200), nullable=False)


class Cafe(db.Model):
    __tablename__ = 'cafes'
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(250), unique=True, nullable=False)
    map_url = db.Column(db.String(300), nullable=False)
    img_url = db.Column(db.String(300), nullable=False)
    location = db.Column(db.String(200), nullable=False)
    has_sockets = db.Column(db.Boolean, nullable=False)
    has_toilet = db.Column(db.Boolean, nullable=False)
    has_wifi = db.Column(db.Boolean, nullable=False)
    can_take_calls = db.Column(db.Boolean, nullable=False)
    seats = db.Column(db.String(200), nullable=False)
    coffee_price = db.Column(db.String(200), nullable=False)


db.create_all()


def admin_only(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if current_user.id != 1:
            return abort(403)
        return f(*args, **kwargs)

    return decorated_function


def generate_otp():
    letters_low = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',
                   'u', 'v', 'w', 'x', 'y', 'z']
    numbers = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']

    letters_up = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T',
                  'U', 'V', 'W', 'X', 'Y', 'Z']

    up_letters_list = [random.choice(letters_low) for _ in range(2)]
    low_letters_list = [random.choice(letters_up) for _ in range(2)]
    numbers_list = [random.choice(numbers) for _ in range(2)]

    password_list = up_letters_list + numbers_list + low_letters_list
    random.shuffle(password_list)
    password = "".join(password_list)
    return password


def send_otp(email):
    global OTP
    sender = 'hundreddayscode@gmail.com'
    receivers = email
    password = 'nxpiqeokbgstwged'
    # (generated by App Password in google security settings)
    OTP = generate_otp()

    content = f"To authenticate, please use the following One Time Password(OTP):\n {OTP}\n Don't" \
              f" share this OTP with anyone. Our customer service team will never ask you for your" \
              f" password, OTP, credit card, or banking info.\n We hope to see you again soon."

    message = MIMEMultipart()
    message["From"] = sender
    message["To"] = receivers
    message["Subject"] = 'Response from blog website'

    message.attach(MIMEText(content, "plain"))

    session = smtplib.SMTP("smtp.gmail.com", 587)
    session.starttls()
    session.login(sender, password)
    text = message.as_string()
    session.sendmail(sender, receivers, text)
    session.quit()


def check_bool(_checkbox):
    if request.form.get(_checkbox) is None:
        return False
    else:
        return True


@app.route('/')
def home_page():
    return render_template("index.html")


@app.route('/sign_up', methods=['POST', 'GET'])
def sign_up_page():
    if request.method == "POST":
        if request.form['Name'] is None or request.form["Email"] is None or request.form['Password'] is None or \
                request.form['Re-Password'] is None or request.form.get('checkbox') is None:
            flash('Fill the all entries and check the box.')

        elif User.query.filter_by(email=request.form['Email']).first():
            # User already exists
            flash("You've already signed up with that email, log in instead!")
            return redirect(url_for('login_page'))

        elif request.form['Password'] != request.form['Re-Password']:
            flash('Password entries must be same.')
        else:
            hash_and_salted_password = generate_password_hash(
                request.form['Password'],
                method='pbkdf2:sha256',
                salt_length=8)
            new_user = User()
            new_user.name = request.form['Name']
            new_user.email = request.form['Email']
            new_user.password = hash_and_salted_password
            db.session.add(new_user)
            db.session.commit()
            return redirect(url_for('login_page'))
    return render_template('Signup_page.html')


@app.route('/Login', methods=["POST", "GET"])
def login_page():
    if request.method == "POST":
        user = User.query.filter_by(email=request.form['Email']).first()
        if request.form['Email'] is None or request.form['Password'] is None:
            flash('Fill all the entries.')

        elif user is None:
            flash("You don't have an account, create a free account.")
            return redirect(url_for('sign_up_page'))

        elif not check_password_hash(password=request.form['Password'], pwhash=user.password):
            flash('Password is incorrect!')

        else:
            login_user(user)
            return redirect(url_for('cafes'))
    return render_template('Login_page.html')


@app.route('/logout', methods=['POST', 'GET'])
@login_required
def logout_page():
    logout_user()
    return render_template('index.html')


@app.route('/forgot', methods=['POST', 'GET'])
def send_otp_to_email():
    global user_forgot
    if request.method == 'POST':
        user_forgot = User.query.filter_by(email=request.form['Email_for_otp']).first()
        if not user_forgot:
            flash('Email is not registered.')
        else:
            send_otp(request.form["Email_for_otp"])
            return redirect(url_for('check_otp'))
    return render_template('forgot_pass.html')


@app.route('/check', methods=["POST", "GET"])
def check_otp():
    if request.method == 'POST':
        if request.form["user_otp"] != OTP:
            flash('Wrong Otp entered!')
        else:
            return redirect(url_for('set_password'))
    return render_template('check_otp.html')


@app.route('/set', methods=["POST", "GET"])
def set_password():
    if request.method == 'POST':
        if request.form['password'] != request.form['re-password']:
            flash('Password entries must be same.')
        else:
            user = User.query.get(user_forgot.id)
            user.password = generate_password_hash(request.form['password'], method='pbkdf2:sha256', salt_length=8)
            db.session.commit()
            return redirect(url_for('login_page'))
    return render_template('set_pass.html', email=user_forgot.email)


@app.route('/Cafes')
@login_required
def cafes():
    all_cafes = Cafe.query.all()
    return render_template('cafes.html', all_cafes=all_cafes)


@app.route('/cafe/<int:cafe_id>', methods=["POST", "GET"])
@login_required
def single_cafe(cafe_id):
    cafe = Cafe.query.get(cafe_id)
    boolean_list = [cafe.has_wifi, cafe.has_sockets, cafe.has_toilet, cafe.can_take_calls]
    return render_template('single_cafe.html', cafe=cafe, boolean=boolean_list)


@app.route('/add', methods=["POST", "GET"])
@login_required
@admin_only
def add_cafe():
    if request.method == "POST":
        if request.form['Cafe_name'] == '' or request.form['Location'] == '' or request.form["Seats"] == '' or \
                request.form['Price'] == '' or request.form['Map_url'] == '' or request.form['Img_url'] == '':
            flash('Fill all the entries.')

        elif Cafe.query.filter_by(name=request.form['Cafe_name']).first():
            flash('Cafe with this name is already exist.')
        else:
            new_cafe = Cafe(
                name=request.form['Cafe_name'], location=request.form['Location'], seats=request.form['Seats'],
                coffee_price=f"£{request.form['Price']}", map_url=request.form['Map_url'],
                img_url=request.form['Img_url'], has_wifi=check_bool('wifi_checkbox'),
                has_sockets=check_bool('socket_checkbox'), has_toilet=check_bool('toilet_checkbox'),
                can_take_calls=check_bool('calls_checkbox'))
            db.session.add(new_cafe)
            db.session.commit()
            return redirect(url_for('cafes'))
    return render_template('add_cafe.html', edit=[])


@app.route('/edit/<int:cafe_id>', methods=["POST", "GET"])
@login_required
@admin_only
def edit_cafe(cafe_id):
    cafe_to_edit = Cafe.query.get(cafe_id)
    cafe_dtls = [cafe_to_edit.name, cafe_to_edit.location, cafe_to_edit.seats,
                 cafe_to_edit.coffee_price.replace('£', ''), cafe_to_edit.map_url, cafe_to_edit.img_url]

    for _ in [cafe_to_edit.has_wifi, cafe_to_edit.has_sockets, cafe_to_edit.has_toilet, cafe_to_edit.can_take_calls]:
        if _:
            cafe_dtls.append('checked')
        else:
            cafe_dtls.append('')

    if request.method == 'POST':
        if request.form['Location'] == '' or request.form["Seats"] == '' or request.form['Price'] == '' or \
                request.form['Map_url'] == '' or request.form['Img_url'] == '':
            flash('Fill all the entries.')
        else:
            cafe_to_edit.location = request.form['Location']
            cafe_to_edit.seats = request.form["Seats"]
            cafe_to_edit.coffee_price = f"£{request.form['Price']}"
            cafe_to_edit.map_url = request.form['Map_url']
            cafe_to_edit.img_url = request.form['Img_url']
            cafe_to_edit.has_wifi = check_bool('wifi_checkbox')
            cafe_to_edit.has_sockets = check_bool('socket_checkbox')
            cafe_to_edit.has_toilet = check_bool('toilet_checkbox')
            cafe_to_edit.can_take_calls = check_bool('calls_checkbox')
            db.session.commit()
            return redirect(url_for('cafes'))
    return render_template('edit_cafe.html', edit=cafe_dtls, cafe=cafe_to_edit)


@app.route('/delete/<int:cafe_id>')
@login_required
@admin_only
def delete_cafe(cafe_id):
    cafe_to_delete = Cafe.query.get(cafe_id)
    db.session.delete(cafe_to_delete)
    db.session.commit()
    return redirect(url_for('cafes'))


if __name__ == '__main__':
    app.run(debug=True)
